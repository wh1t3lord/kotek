cmake_minimum_required(VERSION 3.19.3)

project(kotek.core.defines.static.cpp VERSION 1 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if ("${KOTEK_STD_LIBRARY}" STREQUAL "")
	set(KOTEK_STD_LIBRARY "BOOST" CACHE INTERNAL "")
endif()

if ("${KOTEK_UI_GAME_LIBRARY}" STREQUAL "")
	# By default we use RmlUI util I will finish my library

	# TODO: add CEF only when we have it in vcpkg or any other package managers
	set(KOTEK_UI_GAME_LIBRARY "RMLUI" CACHE INTERNAL "")
endif()

if ("${KOTEK_GAME_OUTPUT_LIBRARY_NAME}" STREQUAL "")
	set(KOTEK_GAME_OUTPUT_LIBRARY_NAME "game.ktk" CACHE INTERNAL "")
endif()

message("[${PROJECT_NAME}]: KOTEK_STD_LIBRARY=${KOTEK_STD_LIBRARY}")

if ("${KOTEK_STD_LIBRARY}" STREQUAL "BOOST")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_BOOST_LIBRARY)

	set(KOTEK_STD_LIBRARY_NAME "Boost")
elseif("${KOTEK_STD_LIBRARY}" STREQUAL "STD")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_STD_LIBRARY)

	set(KOTEK_STD_LIBRARY_NAME "Standard library")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_CUSTOM_STD_LIBRARY)

	set(KOTEK_STD_LIBRARY_NAME ${KOTEK_STD_LIBRARY})
endif()

if ("${KOTEK_SDK_IMGUI}" STREQUAL "")
	set(KOTEK_SDK_IMGUI "IMGUI" CACHE INTERNAL "")
	set(KOTEK_UI_IMGUI_LIBRARY_IMGUI "" CACHE INTERNAL "")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_SDK_IMGUI)
endif()

# By default we for to use CEF
if ("${KOTEK_UI_GAME_LIBRARY}" STREQUAL "CEF")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_CEF_LIBRARY)

	# For internal (cmake) purposes
	set(KOTEK_UI_GAME_LIBRARY_NAME "CEF")

	# For C++ code generation
	set(KOTEK_UI_GAME_LIBRARY_DESCRIPTION_NAME "Chromium Embedded Framework")
elseif("${KOTEK_UI_GAME_LIBRARY}" STREQUAL "RMLUI")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_RMLUI_LIBRARY)

	set(KOTEK_UI_GAME_LIBRARY_NAME "RMLUI")
	set(KOTEK_UI_GAME_LIBRARY_DESCRIPTION_NAME "RmlUi")
elseif("${KOTEK_UI_GAME_LIBRARY}" STREQUAL "ATHENA")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_ATHENA_LIBRARY)

	set(KOTEK_UI_GAME_LIBRARY_NAME "ATHENA")
	set(KOTEK_UI_GAME_LIBRARY_DESCRIPTION_NAME "Athena")
else()
	message("[${PROJECT_NAME}] you didn't specify any ui library for this generation")
endif()

if ("${KOTEK_HIDE_CPP_DISABLE_ALL_WARNINGS_PREPROCESSOR}" STREQUAL "ON")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_HIDE_DISABLE_WARNINGS_PREPROCESSOR)
endif()

if ("${KOTEK_HIDE_CPP_KEYWORD_PREPROCESSOR}" STREQUAL "ON")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_HIDE_CPP_KEYWORD_PREPROCESSOR)
endif()

if ("${KOTEK_CPP_KEYWORD_NOEXCEPT}" STREQUAL "")
	set(KOTEK_CPP_KEYWORD_NOEXCEPT "noexcept")
endif()

if ("${KOTEK_CPP_KEYWORD_INLINE}" STREQUAL "")
	set(KOTEK_CPP_KEYWORD_INLINE "inline")
endif()

if ("${KOTEK_CPP_KEYWORD_CONSTEXPR}" STREQUAL "")
	set(KOTEK_CPP_KEYWORD_CONSTEXPR "constexpr")
endif()

if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
	if ("${KOTEK_MEMORY_LEAK_DETECTION}" STREQUAL "")
		set(KOTEK_MEMORY_LEAK_DETECTION "ON" CACHE INTERNAL "")
	endif()
endif()

if ("${KOTEK_MEMORY_LEAK_DETECTION}" STREQUAL "ON")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_MEMORY_LEAK_DETECTION)
endif()

if ("${KOTEK_CPP_MEMORY_LEAK_LIBRARY}" STREQUAL "")
	if (WIN32)
		set(KOTEK_CPP_MEMORY_LEAK_LIBRARY "VLD" CACHE INTERNAL "")
	endif()
endif()

if ("${KOTEK_MEMORY_ALLOCATOR_CPU}" STREQUAL "")
	set(KOTEK_MEMORY_ALLOCATOR_CPU "MIMALLOC" CACHE INTERNAL "")
endif()


### Namespaces

if ("${KOTEK_NAMESPACE_KOTEK}" STREQUAL "" OR "${KOTEK_NAMESPACE_KOTEK}" STREQUAL "ON")
	if ("${KOTEK_BEGIN_NAMESPACE_KOTEK}" STREQUAL "")
		set(KOTEK_USE_NAMESPACE_KOTEK "Kotek::")
		set(KOTEK_BEGIN_NAMESPACE_KOTEK "Kotek")
	else()
		set(KOTEK_USE_NAMESPACE_KOTEK "${KOTEK_BEGIN_NAMESPACE_KOTEK}::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_KOTEK)
	set(KOTEK_END_NAMESPACE_KOTEK "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_KOTEK)
	set(KOTEK_USE_NAMESPACE_KOTEK "")
	set(KOTEK_BEGIN_NAMESPACE_KOTEK "")
	set(KOTEK_END_NAMESPACE_KOTEK "")
endif()

if ("${KOTEK_NAMESPACE_CORE}" STREQUAL "" OR "${KOTEK_NAMESPACE_CORE}" STREQUAL "ON")
	if ("${KOTEK_BEGIN_NAMESPACE_CORE}" STREQUAL "")
		set(KOTEK_USE_NAMESPACE_CORE "Core::")
		set(KOTEK_BEGIN_NAMESPACE_CORE "Core")
	else()
		set(KOTEK_USE_NAMESPACE_CORE "${KOTEK_BEGIN_NAMESPACE_CORE}::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_CORE)
	set(KOTEK_END_NAMESPACE_CORE "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_CORE)
	set(KOTEK_USE_NAMESPACE_CORE "")
	set(KOTEK_BEGIN_NAMESPACE_CORE "")
	set(KOTEK_END_NAMESPACE_CORE "")
endif()


if ("${KOTEK_NAMESPACE_KTK}" STREQUAL "" OR "${KOTEK_NAMESPACE_KTK}" STREQUAL "ON")
	if ("${KOTEK_BEGIN_NAMESPACE_KTK}" STREQUAL "")
		set(KOTEK_BEGIN_NAMESPACE_KTK "ktk")
		set(KOTEK_USE_NAMESPACE_KTK "ktk::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_KTK)
	set(KOTEK_END_NAMESPACE_KTK "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_KTK)
	set(KOTEK_USE_NAMESPACE_KTK "")
	set(KOTEK_BEGIN_NAMESPACE_KTK "")
	set(KOTEK_END_NAMESPACE_KTK "")
endif()


if ("${KOTEK_NAMESPACE_RENDER}" STREQUAL "" OR "${KOTEK_NAMESPACE_RENDER}" STREQUAL "ON")

	if ("${KOTEK_BEGIN_NAMESPACE_RENDER}" STREQUAL "")
		set(KOTEK_BEGIN_NAMESPACE_RENDER "Render")
		set(KOTEK_USE_NAMESPACE_RENDER "Render::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_RENDER)
	set(KOTEK_END_NAMESPACE_RENDER "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_RENDER)
	set(KOTEK_USE_NAMESPACE_RENDER "")
	set(KOTEK_BEGIN_NAMESPACE_RENDER "")
	set(KOTEK_END_NAMESPACE_RENDER "")
endif()

if ("${KOTEK_NAMESPACE_UI}" STREQUAL "" OR "${KOTEK_NAMESPACE_UI}" STREQUAL "ON")

	if ("${KOTEK_BEGIN_NAMESPACE_UI}" STREQUAL "")
		set(KOTEK_BEGIN_NAMESPACE_UI "UI")
		set(KOTEK_USE_NAMESPACE_UI "UI::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_UI)
	set(KOTEK_END_NAMESPACE_UI "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_UI)
	set(KOTEK_USE_NAMESPACE_UI "")
	set(KOTEK_BEGIN_NAMESPACE_UI "")
	set(KOTEK_END_NAMESPACE_UI "")
endif()

if ("${KOTEK_NAMESPACE_MATH}" STREQUAL "" OR "${KOTEK_NAMESPACE_MATH}" STREQUAL "ON")
	if ("${KOTEK_BEGIN_NAMESPACE_MATH}" STREQUAL "")
		set(KOTEK_BEGIN_NAMESPACE_MATH "math")
		set(KOTEK_USE_NAMESPACE_MATH "math::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_MATH)
	set(KOTEK_END_NAMESPACE_MATH "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_MATH)
	set(KOTEK_USE_NAMESPACE_MATH "")
	set(KOTEK_BEGIN_NAMESPACE_MATH "")
	set(KOTEK_END_NAMESPACE_MATH "")
endif()

if ("${KOTEK_DEVELOPMENT_TYPE}" STREQUAL "")
	set(KOTEK_DEVELOPMENT_TYPE "SHARED" CACHE INTERNAL "")
endif()

if ("${KOTEK_NAMESPACE_GAME}" STREQUAL "" OR "${KOTEK_NAMESPACE_GAME}" STREQUAL "ON")

	if ("${KOTEK_BEGIN_NAMESPACE_GAME}" STREQUAL "")
		set(KOTEK_BEGIN_NAMESPACE_GAME "Game")
		set(KOTEK_USE_NAMESPACE_GAME "Game::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_GAME)
	set(KOTEK_END_NAMESPACE_GAME "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_GAME)
	set(KOTEK_USE_NAMESPACE_GAME "")
	set(KOTEK_BEGIN_NAMESPACE_GAME "")
	set(KOTEK_END_NAMESPACE_GAME "")
endif()

if ("${KOTEK_NAMESPACE_ECS}" STREQUAL "" OR "${KOTEK_NAMESPACE_ECS}" STREQUAL "ON")

	if ("${KOTEK_BEGIN_NAMESPACE_ECS}" STREQUAL "")
		set(KOTEK_BEGIN_NAMESPACE_ECS "ecs")
		set(KOTEK_USE_NAMESPACE_ECS "ecs::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_ECS)
	set(KOTEK_END_NAMESPACE_ECS "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_ECS)
	set(KOTEK_USE_NAMESPACE_ECS "")
	set(KOTEK_BEGIN_NAMESPACE_ECS "")
	set(KOTEK_END_NAMESPACE_ECS "")
endif()

if ("${KOTEK_NAMESPACE_ECS_FRONTEND}" STREQUAL "" OR "${KOTEK_NAMESPACE_ECS_FRONTEND}" STREQUAL "ON")

	if ("${KOTEK_BEGIN_NAMESPACE_ECS_FRONTEND}" STREQUAL "")
		set(KOTEK_BEGIN_NAMESPACE_ECS_FRONTEND "frontend")
		set(KOTEK_USE_NAMESPACE_ECS_FRONTEND "frontend::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_ECS_FRONTEND)
	set(KOTEK_END_NAMESPACE_ECS_FRONTEND "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_ECS_FRONTEND)
	set(KOTEK_USE_NAMESPACE_ECS_FRONTEND "")
	set(KOTEK_BEGIN_NAMESPACE_ECS_FRONTEND "")
	set(KOTEK_END_NAMESPACE_ECS_FRONTEND "")
endif()

if ("${KOTEK_NAMESPACE_ECS_BACKEND}" STREQUAL "" OR "${KOTEK_NAMESPACE_ECS_BACKEND}" STREQUAL "ON")

	if ("${KOTEK_BEGIN_NAMESPACE_ECS_BACKEND}" STREQUAL "")
		set(KOTEK_BEGIN_NAMESPACE_ECS_BACKEND "backend")
		set(KOTEK_USE_NAMESPACE_ECS_BACKEND "backend::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_ECS_BACKEND)
	set(KOTEK_END_NAMESPACE_ECS_BACKEND "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_ECS_BACKEND)
	set(KOTEK_USE_NAMESPACE_ECS_BACKEND "")
	set(KOTEK_BEGIN_NAMESPACE_ECS_BACKEND "")
	set(KOTEK_END_NAMESPACE_ECS_BACKEND "")
endif()

if ("${KOTEK_NAMESPACE_RENDER_GL}" STREQUAL "" OR "${KOTEK_NAMESPACE_RENDER_GL}" STREQUAL "ON")

	if ("${KOTEK_BEGIN_NAMESPACE_RENDER_GL}" STREQUAL "")
		set(KOTEK_BEGIN_NAMESPACE_RENDER_GL "gl")
		set(KOTEK_USE_NAMESPACE_RENDER_GL "gl::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_RENDER_GL)
	set(KOTEK_END_NAMESPACE_RENDER_GL "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_RENDER_GL)
	set(KOTEK_USE_NAMESPACE_RENDER_GL "")
	set(KOTEK_BEGIN_NAMESPACE_RENDER_GL "")
	set(KOTEK_END_NAMESPACE_RENDER_GL "")
endif()

if ("${KOTEK_NAMESPACE_RENDER_VK}" STREQUAL "" OR "${KOTEK_NAMESPACE_RENDER_VK}" STREQUAL "ON")

	if ("${KOTEK_BEGIN_NAMESPACE_RENDER_VK}" STREQUAL "")
		set(KOTEK_BEGIN_NAMESPACE_RENDER_VK "vk")
		set(KOTEK_USE_NAMESPACE_RENDER_VK "vk::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_RENDER_VK)
	set(KOTEK_END_NAMESPACE_RENDER_VK "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_RENDER_VK)
	set(KOTEK_USE_NAMESPACE_RENDER_VK "")
	set(KOTEK_BEGIN_NAMESPACE_RENDER_VK "")
	set(KOTEK_END_NAMESPACE_RENDER_VK "")
endif()

if ("${KOTEK_NAMESPACE_RENDER_DX}" STREQUAL "" OR "${KOTEK_NAMESPACE_RENDER_DX}" STREQUAL "ON")

	if ("${KOTEK_BEGIN_NAMESPACE_RENDER_DX}" STREQUAL "")
		set(KOTEK_BEGIN_NAMESPACE_RENDER_DX "dx")
		set(KOTEK_USE_NAMESPACE_RENDER_DX "dx::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_RENDER_DX)
	set(KOTEK_END_NAMESPACE_RENDER_DX "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_RENDER_DX)
	set(KOTEK_USE_NAMESPACE_RENDER_DX "")
	set(KOTEK_BEGIN_NAMESPACE_RENDER_DX "")
	set(KOTEK_END_NAMESPACE_RENDER_DX "")
endif()

if ("${KOTEK_NAMESPACE_SOUND}" STREQUAL "" OR "${KOTEK_NAMESPACE_SOUND}" STREQUAL "ON")

	if ("${KOTEK_BEGIN_NAMESPACE_SOUND}" STREQUAL "")
		set(KOTEK_BEGIN_NAMESPACE_SOUND "Sound")
		set(KOTEK_USE_NAMESPACE_SOUND "Sound::")
	endif()

	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_SOUND)
	set(KOTEK_END_NAMESPACE_SOUND "}")
else()
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_NAMESPACE_SOUND)
	set(KOTEK_USE_NAMESPACE_SOUND "")
	set(KOTEK_BEGIN_NAMESPACE_SOUND "")
	set(KOTEK_END_NAMESPACE_SOUND "")
endif()


### Namespaces


### Renderers

if ("${KOTEK_RENDER_OPENGL}" STREQUAL "")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_RENDER_OPENGL)
endif()

# TODO: change as OpenGL, because Vulkan is not updated
if ("${KOTEK_RENDER_VULKAN}" STREQUAL "ON")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_RENDER_VULKAN)
endif()

### Renderers

# TODO: add HYBRID it is a current SHARED, but SHARED is when ALL libraries are dll
if ("${KOTEK_DEVELOPMENT_TYPE}" STREQUAL "SHARED")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_DEVELOPMENT_TYPE_${KOTEK_DEVELOPMENT_TYPE})
	set(KOTEK_DEVELOPMENT_TYPE_PACKAGES "SHARED" CACHE INTERNAL "")
elseif("${KOTEK_DEVELOPMENT_TYPE}" STREQUAL "STATIC")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_DEVELOPMENT_TYPE_${KOTEK_DEVELOPMENT_TYPE})
	set(KOTEK_DEVELOPMENT_TYPE_PACKAGES "STATIC" CACHE INTERNAL "")

	if ("${KOTEK_GAME_MODULE_FUNCTIONS_FILE}" STREQUAL "")
		message(FATAL_ERROR "you must specify KOTEK_GAME_MODULE_FUNCTIONS_FILE by writting <path/to/your_file_where_standard_functions_for_running_module_are_defined.h>. But you make a path from root of your folder see sandbox example https://gitlab.com/wh1t3lord/sandbox")
	endif()

	if ("${KOTEK_USER_FUNCTION_IMG}" STREQUAL "")
		set(KOTEK_USER_FUNCTION_IMG "InitializeModule_Game")
	endif()

	if ("${KOTEK_USER_FUNCTION_SMG}" STREQUAL "")
		set(KOTEK_USER_FUNCTION_SMG "ShutdownModule_Game")
	endif()

	if ("${KOTEK_USER_FUNCTION_UMG}" STREQUAL "")
		set(KOTEK_USER_FUNCTION_UMG "UpdateModule_Game")
	endif()

	if ("${KOTEK_USER_FUNCTION_IMR}" STREQUAL "")
		set(KOTEK_USER_FUNCTION_IMR "InitializeModule_Render")
	endif()
else()
	message(FATAL_ERROR "you must specify KOTEK_DEVELOPMENT_TYPE as SHARED or STATIC...")
endif()

message("[${PROJECT_NAME}]: standard library is ${KOTEK_STD_LIBRARY_NAME}")


### Generating code
if (NOT "${CMAKE_BUILD_TYPE}" STREQUAL "")
	list(APPEND KOTEK_OUTPUT_FLAGS -DKOTEK_BUILD_TYPE)

	file(WRITE ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} "#pragma once

	#ifdef KOTEK_BUILD_TYPE
		#define KOTEK_USE_CURRENT_BUILD_TYPE ${CMAKE_BUILD_TYPE}
	#endif
	")

	if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
		file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} "
		#ifdef KOTEK_BUILD_TYPE
			#define KOTEK_USE_BUILD_TYPE_DEBUG
		#endif
		")
	endif()

	if ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
		file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} "
		#ifdef KOTEK_BUILD_TYPE
			#define KOTEK_USE_BUILD_TYPE_RELEASE
		#endif
		")
	endif()

	file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} "
		#ifdef KOTEK_BOOST_LIBRARY
			#define KOTEK_USE_BOOST_LIBRARY
		#endif

		#ifdef KOTEK_STD_LIBRARY
			#define KOTEK_USE_STD_LIBRARY
		#endif

		#define KOTEK_USE_STD_LIBRARY_NAME ${KOTEK_STD_LIBRARY_NAME}

		#if defined(KOTEK_USE_BOOST_LIBRARY) || defined(KOTEK_USE_STD_LIBRARY)
			// use this when we have std implementation like std::any, so we don't need to use it from boost
			#define KOTEK_USE_NOT_CUSTOM_LIBRARY
		#elif defined(KOTEK_CUSTOM_STD_LIBRARY)
			#define KOTEK_USE_CUSTOM_LIBRARY
		#endif
	")

	file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} "
#ifndef KOTEK_HIDE_CPP_DISABLE_ALL_WARNINGS_PREPROCESSOR
	#ifdef _WIN32
		#define KOTEK_CPP_DISABLE_ALL_WARNINGS_PUSH _Pragma(\"warning(push,0)\")
	#elif __clang__
		#define KOTEK_CPP_DISABLE_ALL_WARNINGS_PUSH _Pragma(\"clang diagnostic push\") _Pragma(\"clang diagnostic ignored \"-Wall\"\") _Pragma(\"clang diagnostic ignored \"-Wextra\"\")
	#elif __GNUC__
		#error Not implemented for GCC
	#else
		#error Unknown compiler send the issue to authors!
	#endif

	#ifdef _WIN32
		#define KOTEK_CPP_DISABLE_ALL_WARNINGS_POP _Pragma(\"warning(pop)\")
	#elif __clang__
		#define KOTEK_CPP_DISABLE_ALL_WARNINGS_POP _Pragma(\"clang diagnostic pop\")
	#elif __GNUC__
		#error Not implemented for GCC
	#else
		#error Unknown compiler send the issue to authors!
	#endif
#else
	#define KOTEK_CPP_DISABLE_ALL_WARNINGS_PUSH
	#define KOTEK_CPP_DISABLE_ALL_WARNINGS_POP
#endif
	")

	file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} "
	#ifndef KOTEK_HIDE_CPP_KEYWORD_PREPROCESSOR
		#define KOTEK_CPP_KEYWORD_CONSTEXPR ${KOTEK_CPP_KEYWORD_CONSTEXPR}
		#define KOTEK_CPP_KEYWORD_INLINE ${KOTEK_CPP_KEYWORD_INLINE}
		#define KOTEK_CPP_KEYWORD_NOEXCEPT ${KOTEK_CPP_KEYWORD_NOEXCEPT} 
	#else
		#define KOTEK_CPP_KEYWORD_CONSTEXPR
		#define KOTEK_CPP_KEYWORD_INLINE
		#define KOTEK_CPP_KEYWORD_NOEXCEPT
	#endif
	")

	file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} "
	#ifdef KOTEK_MEMORY_LEAK_DETECTION
		#define KOTEK_USE_MEMORY_LEAK_DETECTION
		#define KOTEK_USE_MEMORY_LEAK_DETECTION_${KOTEK_CPP_MEMORY_LEAK_LIBRARY}
	#endif
	")

	file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} "
	#ifndef NDEBUG
		#define KOTEK_DEBUG

		// for use in terms of all, we should provide for every preprocessor and 
		// the _USE_ form even if it doesn't required 
		// or if it will not be used in practice
		#define KOTEK_USE_DEBUG
	#endif
	")

	if ("${KOTEK_UI_GAME_LIBRARY}" STREQUAL "CEF")
		file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} "
		#ifdef KOTEK_CEF_LIBRARY
			#define KOTEK_USE_CEF_LIBRARY
		#endif
		")
	elseif("${KOTEK_UI_GAME_LIBRARY}" STREQUAL "RMLUI")
		file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} "
		#ifdef KOTEK_RMLUI_LIBRARY
			#define KOTEK_USE_RMLUI_LIBRARY
		#endif
		")
	endif()

	file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} 
	"
		#define KOTEK_USE_${KOTEK_UI_GAME_LIBRARY_NAME}_LIBRARY_NAME ${KOTEK_UI_GAME_LIBRARY_DESCRIPTION_NAME}
	")

	file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS}
	"
		#ifdef KOTEK_NAMESPACE_KOTEK
			#define KOTEK_USE_NAMESPACE_KOTEK ${KOTEK_USE_NAMESPACE_KOTEK}
			#define KOTEK_BEGIN_NAMESPACE_KOTEK namespace ${KOTEK_BEGIN_NAMESPACE_KOTEK} {
			#define KOTEK_END_NAMESPACE_KOTEK ${KOTEK_END_NAMESPACE_KOTEK}
		#endif

		#ifdef KOTEK_NAMESPACE_CORE
			#define KOTEK_USE_NAMESPACE_CORE ${KOTEK_USE_NAMESPACE_CORE}
			#define KOTEK_BEGIN_NAMESPACE_CORE namespace ${KOTEK_BEGIN_NAMESPACE_CORE} {
			#define KOTEK_END_NAMESPACE_CORE ${KOTEK_END_NAMESPACE_CORE}
		#endif

		#ifdef KOTEK_NAMESPACE_KTK
			#define KOTEK_USE_NAMESPACE_KTK ${KOTEK_USE_NAMESPACE_KTK}
			#define KOTEK_BEGIN_NAMESPACE_KTK namespace ${KOTEK_BEGIN_NAMESPACE_KTK} {
			#define KOTEK_END_NAMESPACE_KTK ${KOTEK_END_NAMESPACE_KTK}
		#endif

		#ifdef KOTEK_NAMESPACE_RENDER
			#define KOTEK_USE_NAMESPACE_RENDER ${KOTEK_USE_NAMESPACE_RENDER}
			#define KOTEK_BEGIN_NAMESPACE_RENDER namespace ${KOTEK_BEGIN_NAMESPACE_RENDER} {
			#define KOTEK_END_NAMESPACE_RENDER ${KOTEK_END_NAMESPACE_RENDER}
		#endif

		#ifdef KOTEK_NAMESPACE_UI
			#define KOTEK_USE_NAMESPACE_UI ${KOTEK_USE_NAMESPACE_UI}
			#define KOTEK_BEGIN_NAMESPACE_UI namespace ${KOTEK_BEGIN_NAMESPACE_UI} {
			#define KOTEK_END_NAMESPACE_UI ${KOTEK_END_NAMESPACE_UI}
		#endif

		#ifdef KOTEK_NAMESPACE_MATH
			#define KOTEK_USE_NAMESPACE_MATH ${KOTEK_USE_NAMESPACE_MATH}
			#define KOTEK_BEGIN_NAMESPACE_MATH namespace ${KOTEK_BEGIN_NAMESPACE_MATH} {
			#define KOTEK_END_NAMESPACE_MATH ${KOTEK_END_NAMESPACE_MATH}
		#endif

		#ifdef KOTEK_NAMESPACE_GAME
			#define KOTEK_USE_NAMESPACE_GAME ${KOTEK_USE_NAMESPACE_GAME}
			#define KOTEK_BEGIN_NAMESPACE_GAME namespace ${KOTEK_BEGIN_NAMESPACE_GAME} {
			#define KOTEK_END_NAMESPACE_GAME ${KOTEK_END_NAMESPACE_GAME}
		#endif

		#ifdef KOTEK_NAMESPACE_ECS
			#define KOTEK_USE_NAMESPACE_ECS ${KOTEK_USE_NAMESPACE_ECS}
			#define KOTEK_BEGIN_NAMESPACE_ECS namespace ${KOTEK_BEGIN_NAMESPACE_ECS} {
			#define KOTEK_END_NAMESPACE_ECS ${KOTEK_END_NAMESPACE_ECS}
		#endif

		#ifdef KOTEK_NAMESPACE_ECS_FRONTEND
			#define KOTEK_USE_NAMESPACE_ECS_FRONTEND ${KOTEK_USE_NAMESPACE_ECS_FRONTEND}
			#define KOTEK_BEGIN_NAMESPACE_ECS_FRONTEND namespace ${KOTEK_BEGIN_NAMESPACE_ECS_FRONTEND} {
			#define KOTEK_END_NAMESPACE_ECS_FRONTEND ${KOTEK_END_NAMESPACE_ECS_FRONTEND}
		#endif

		#ifdef KOTEK_NAMESPACE_ECS_BACKEND
			#define KOTEK_USE_NAMESPACE_ECS_BACKEND ${KOTEK_USE_NAMESPACE_ECS_BACKEND}
			#define KOTEK_BEGIN_NAMESPACE_ECS_BACKEND namespace ${KOTEK_BEGIN_NAMESPACE_ECS_BACKEND} {
			#define KOTEK_END_NAMESPACE_ECS_BACKEND ${KOTEK_END_NAMESPACE_ECS_BACKEND}
		#endif

		#ifdef KOTEK_NAMESPACE_RENDER_GL
			#define KOTEK_USE_NAMESPACE_RENDER_GL ${KOTEK_USE_NAMESPACE_RENDER_GL}
			#define KOTEK_BEGIN_NAMESPACE_RENDER_GL namespace ${KOTEK_BEGIN_NAMESPACE_RENDER_GL} {
			#define KOTEK_END_NAMESPACE_RENDER_GL ${KOTEK_END_NAMESPACE_RENDER_GL}
		#endif

		#ifdef KOTEK_NAMESPACE_RENDER_VK
			#define KOTEK_USE_NAMESPACE_RENDER_VK ${KOTEK_USE_NAMESPACE_RENDER_VK}
			#define KOTEK_BEGIN_NAMESPACE_RENDER_VK namespace ${KOTEK_BEGIN_NAMESPACE_RENDER_VK} {
			#define KOTEK_END_NAMESPACE_RENDER_VK ${KOTEK_END_NAMESPACE_RENDER_VK}
		#endif

		#ifdef KOTEK_NAMESPACE_RENDER_DX
			#define KOTEK_USE_NAMESPACE_RENDER_DX ${KOTEK_USE_NAMESPACE_RENDER_DX}
			#define KOTEK_BEGIN_NAMESPACE_RENDER_DX namespace ${KOTEK_BEGIN_NAMESPACE_RENDER_DX} {
			#define KOTEK_END_NAMESPACE_RENDER_DX ${KOTEK_END_NAMESPACE_RENDER_DX}
		#endif

		#ifdef KOTEK_NAMESPACE_SOUND
			#define KOTEK_USE_NAMESPACE_SOUND ${KOTEK_USE_NAMESPACE_SOUND}
			#define KOTEK_BEGIN_NAMESPACE_SOUND namespace ${KOTEK_BEGIN_NAMESPACE_SOUND} {
			#define KOTEK_END_NAMESPACE_SOUND ${KOTEK_END_NAMESPACE_SOUND}
		#endif
	")

	file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} 
	"
		#ifdef KOTEK_DEVELOPMENT_TYPE_${KOTEK_DEVELOPMENT_TYPE}
			#define KOTEK_USE_DEVELOPMENT_TYPE_${KOTEK_DEVELOPMENT_TYPE}
		#endif
	")

	if ("${KOTEK_DEVELOPMENT_TYPE}" STREQUAL "STATIC")
		file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} 
		"
			#define KOTEK_USER_GAME_MODULE_HEADER_FILE ${KOTEK_GAME_MODULE_FUNCTIONS_FILE}
			#define KOTEK_USER_FUNCTION_INITIALIZE_MODULE_GAME ${KOTEK_USER_FUNCTION_IMG}
			#define KOTEK_USER_FUNCTION_SHUTDOWN_MODULE_GAME ${KOTEK_USER_FUNCTION_SMG}
			#define KOTEK_USER_FUNCTION_UPDATE_MODULE_GAME ${KOTEK_USER_FUNCTION_UMG}
			#define KOTEK_USER_FUNCTION_INITIALIZE_MODULE_RENDER ${KOTEK_USER_FUNCTION_IMR}
		")
	endif()

	if ("${KOTEK_DEPS_FOLDER}" STREQUAL "vcpkg")
		file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} 
		"
			#define BOOST_USE_WINAPI_VERSION BOOST_WINAPI_VERSION_WIN7
		")

		if ("${KOTEK_DEVELOPMENT_TYPE_PACKAGES}" STREQUAL "STATIC")

		else()
				file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} 
				"
					#define BOOST_TEST_NO_MAIN
				")
		endif()
	endif()

	if (NOT "${KOTEK_MEMORY_ALLOCATOR_CPU}" STREQUAL "OFF")
		file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS}
		"
			#define KOTEK_USE_MEMORY_ALLOCATOR_CPU_${KOTEK_MEMORY_ALLOCATOR_CPU}
		")
	endif()

	file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS}
	"
		#define KOTEK_USE_GAME_OUTPUT_LIBRARY_NAME \"${KOTEK_GAME_OUTPUT_LIBRARY_NAME}\"
	")

	file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS}
	"
		#ifdef KOTEK_RENDER_OPENGL
			#define KOTEK_USE_RENDER_OPENGL
		#endif

		#ifdef KOTEK_RENDER_VULKAN
			#define KOTEK_USE_RENDER_VULKAN
		#endif
	")

	file(APPEND ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} 
	"
		#ifdef KOTEK_SDK_IMGUI
			#define KOTEK_USE_SDK_IMGUI
			#define KOTEK_USE_UI_IMGUI_LIBRARY_IMGUI
		#endif
	")
else()
	file(WRITE ${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS} "#pragma once")
endif()

add_library(${PROJECT_NAME} STATIC
	"include/kotek_std_preprocessors.h"
	"include/kotek_core_defines_static_cpp.h"
	"src/main_core_defines_static_cpp_dll.cpp")

target_compile_definitions(${PROJECT_NAME} PUBLIC ${KOTEK_OUTPUT_FLAGS})

if ("${KOTEK_UI_GAME_LIBRARY}" STREQUAL "CEF")
	# TODO: we need to use CEF as package
	if (WIN32)
		# There's no package so we need to use our pre-compiled solution
		if ("${KOTEK_UI_GAME_LIBRARY}" STREQUAL "CEF")
			message("[Engine]: CEF is found!")
			target_include_directories(${PROJECT_NAME} PUBLIC ${PATH_TO_CEF})
			target_link_directories(${PROJECT_NAME} PUBLIC ${PATH_TO_CEF_LIB})
		else()
			message(FATAL_ERROR "can't find dependency folder of pre-compiled CEF (Chromium Embeddeed Framework). Disable this project in order to compile the solution.")
		endif()
	endif()
endif()