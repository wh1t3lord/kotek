cmake_minimum_required(VERSION 3.19.3)
project(kotek.engine)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
message("[${PROJECT_NAME}]: CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR}")
message("[${PROJECT_NAME}]: CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}")

# it is our requirement for generating the library e.g. don't just write 'cmake ..' - OUTDATED
# By new standard you can pass a empty string, but we need to generate solution for debug build. It is required for including/generating stuff for better debug experience
# Memory leak manager, etc
if ("${CMAKE_BUILD_TYPE}" STREQUAL "")
	#message(FATAL_ERROR "[${PROJECT_NAME}]: you must specify CMAKE_BUILD_TYPE flag with the following types: Debug, Release, MinSizeRel, RelWithDebInfo. It supposed to be like -DCMAKE_BUILD_TYPE=Debug")
	set(CMAKE_BUILD_TYPE Debug)
	message("[${PROJECT_NAME}]: Setting build type to: ${CMAKE_BUILD_TYPE}")
endif()

#### OVERRIDING PROJECT NAMES ####

if ("${KOTEK_PROJECT_NAME_OVERRIDE_KOTEK}" STREQUAL "")
	set(KOTEK_PROJECT_NAME_OVERRIDE_KOTEK "kotek")
	message("[${PROJECT_NAME}]: Setting default name for kotek.exe folder: ${KOTEK_PROJECT_NAME_OVERRIDE_KOTEK}")
else()
	message("[${PROJECT_NAME}]: Your overriden kotek.exe [${KOTEK_PROJECT_NAME_OVERRIDE_KOTEK}]")
endif()

#### OVERRIDING PROJECT NAMES ####

if ("${KOTEK_DEPS_FOLDER_ENABLE}" STREQUAL "")
	set(KOTEK_DEPS_FOLDER_ENABLE "ON" CACHE INTERNAL "")
	message("[${PROJECT_NAME}]: KOTEK_DEPS_FOLDER is enabled! Now you should specified your dependency folder name (but not its path)")
endif()

message("[${PROJECT_NAME}]: build type is '${CMAKE_BUILD_TYPE}'")

if ("${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS}" STREQUAL "")
	set(KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS ./include/kotek_std_preprocessors.h)
endif()

if ("${KOTEK_LIBRARY_TYPE}" STREQUAL "")
	set(KOTEK_LIBRARY_TYPE "EMB" CACHE INTERNAL "")
	message("[${PROJECT_NAME}]: library development - ${KOTEK_LIBRARY_TYPE} (EMB is embedded and DYN is dynamic and HYB is hybrid, check documentation about these definitions)")
endif()

message("[${PROJECT_NAME}]: filename for generating preprocessors: '${KOTEK_FILENAME_FOR_GENERATING_PREPROCESSORS}'")

if ("${KOTEK_DEPS_FOLDER}" STREQUAL "")
	message("[${PROJECT_NAME}]: using nuget packages")

	if (WIN32)
		include("cmake/windows/vcpkg_nuget.cmake")
		include("cmake/windows/nuget.cmake")
	endif()

	include("${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake")
endif()

if ("${KOTEK_CPP_ASAN}" STREQUAL "")
	if ("$<CONFIG:Debug>" STREQUAL "1")
		message("[${PROJECT_NAME}]: enabling address sanitizer (ASAN)")
		set(KOTEK_CPP_ASAN "ON" CACHE INTERNAL "")
	endif()
endif()

if ("${KOTEK_DEPS_FOLDER_ENABLE}" STREQUAL "ON")
	if ("${KOTEK_DEPS_FOLDER}" STREQUAL "")
		message("Using nuget packages because you didn't provide a folder that has a package manager\n So we don't need to build solution and using precompiled packages")	
		set(KOTEK_DEPS_FOLDER "nuget" CACHE INTERNAL "")	
	else()
		if (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${KOTEK_DEPS_FOLDER}" AND NOT "${KOTEK_DEPS_FOLDER}" STREQUAL "nuget")
			message("[${PROJECT_NAME}]: your dependency folder is '${KOTEK_DEPS_FOLDER}'")
		elseif (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${KOTEK_DEPS_FOLDER}" AND "${KOTEK_DEPS_FOLDER}" STREQUAL "nuget")
			message("[${PROJECT_NAME}]: you use precompiled packages with nuget")
		else()
			message(FATAL_ERROR "you can't use nuget and ${KOTEK_DEPS_FOLDER} at same time! You need to pass an empty string to KOTEK_DEPS_FOLDER otherwise delete nuget folder and pass a valid folder name to KOTEK_DEPS_FOLDER")
		endif()
	endif()
endif()

if ("${KOTEK_STD_LIBRARY_STATIC_CONTAINERS}" STREQUAL "")
	set(KOTEK_STD_LIBRARY_STATIC_CONTAINERS "ON" CACHE INTERNAL "")
	message("[${PROJECT_NAME}]: static containers are enabled by default!")
endif()

if ("${KOTEK_STD_LIBRARY_HYBRID_CONTAINERS}" STREQUAL "")
	set(KOTEK_STD_LIBRARY_HYBRID_CONTAINERS "ON" CACHE INTERNAL "")
	message("[${PROJECT_NAME}]: hybrid containers are enabled by default!")
endif()

if ("${KOTEK_STD_LIBRARY_DYNAMIC_CONTAINERS}" STREQUAL "")
	set(KOTEK_STD_LIBRARY_DYNAMIC_CONTAINERS "ON" CACHE INTERNAL "")
	message("[${PROJECT_NAME}]: dynamic containers are enabled by default!")
endif()

if ("${KOTEK_STARTUP_RENDERER}" STREQUAL "")
	set(KOTEK_STARTUP_RENDERER "OpenGLES_SpecifiedByUser" CACHE INTERNAL "")
	set(KOTEK_STARTUP_RENDERER_VERSION "OpenGLES_3_1" CACHE INTERNAL "")
	message("[${PROJECT_NAME}]: using OpenGL ES ver 3.1 as default renderer")
endif()

include_directories("src")

add_subdirectory("src/kotek.core.defines.static.tests")
add_subdirectory("src/kotek.core.defines.static.cpp")
add_subdirectory("src/kotek.core.defines.static.git")
add_subdirectory("src/kotek.core.defines.static.render")
add_subdirectory("src/kotek.core.defines.static.render.dx")
add_subdirectory("src/kotek.core.defines.static.render.gl")
add_subdirectory("src/kotek.core.defines.static.render.vk")
add_subdirectory("src/kotek.core.defines.static.render.bgfx")
add_subdirectory("src/kotek.core.defines.static.math")
add_subdirectory("src/kotek.core.defines.static.os")
add_subdirectory("src/kotek.core.defines.static.os.win32")
add_subdirectory("src/kotek.core.defines.static.os.linux")
add_subdirectory("src/kotek.core.defines.static.profilers")
add_subdirectory("src/kotek.core.defines.static.sdk")
add_subdirectory("src/kotek.core.defines.static.string")
add_subdirectory("src/kotek.core.defines.static")


add_subdirectory("src/kotek.core.defines_dependent.text")
add_subdirectory("src/kotek.core.defines_dependent.message")
add_subdirectory("src/kotek.core.defines_dependent.assert")
add_subdirectory("src/kotek.core.defines_dependent.ecs")
add_subdirectory("src/kotek.core.defines_dependent")

add_subdirectory("src/kotek.core.defines")

add_subdirectory("src/kotek.core")
add_subdirectory("src/kotek.core.api")
add_subdirectory("src/kotek.core.types")
add_subdirectory("src/kotek.core.types.char")
add_subdirectory("src/kotek.core.types.numerics")
add_subdirectory("src/kotek.core.types.string")
add_subdirectory("src/kotek.core.casting")
add_subdirectory("src/kotek.core.casting.lexical")
add_subdirectory("src/kotek.core.casting.string")
add_subdirectory("src/kotek.core.constants")
add_subdirectory("src/kotek.core.constants.math")
add_subdirectory("src/kotek.core.constants.ecs")
add_subdirectory("src/kotek.core.constants.string")
add_subdirectory("src/kotek.core.constants.window")
add_subdirectory("src/kotek.core.constants.render")
add_subdirectory("src/kotek.core.constants.resource_manager")
add_subdirectory("src/kotek.core.containers")
add_subdirectory("src/kotek.core.containers.any")
add_subdirectory("src/kotek.core.containers.array")
add_subdirectory("src/kotek.core.containers.string")
add_subdirectory("src/kotek.core.containers.hash")
add_subdirectory("src/kotek.core.containers.deque")
add_subdirectory("src/kotek.core.containers.dll")
add_subdirectory("src/kotek.core.containers.filesystem")
add_subdirectory("src/kotek.core.containers.filesystem.path")
add_subdirectory("src/kotek.core.containers.function")
add_subdirectory("src/kotek.core.containers.io")
add_subdirectory("src/kotek.core.containers.json")
add_subdirectory("src/kotek.core.containers.map")
add_subdirectory("src/kotek.core.containers.microsoft")
add_subdirectory("src/kotek.core.containers.microsoft.wrl.comptr")
add_subdirectory("src/kotek.core.containers.multithreading")
add_subdirectory("src/kotek.core.containers.multithreading.tbb")
add_subdirectory("src/kotek.core.containers.multithreading.atomic")
add_subdirectory("src/kotek.core.containers.multithreading.mutex")
add_subdirectory("src/kotek.core.containers.multithreading.shared_mutex")
add_subdirectory("src/kotek.core.containers.multithreading.thread")
add_subdirectory("src/kotek.core.containers.multithreading.semaphore")
add_subdirectory("src/kotek.core.containers.multithreading.queue")
add_subdirectory("src/kotek.core.containers.multithreading.condition_variable")
add_subdirectory("src/kotek.core.containers.pair")
add_subdirectory("src/kotek.core.containers.queue")
add_subdirectory("src/kotek.core.containers.shared_ptr")
add_subdirectory("src/kotek.core.containers.unique_ptr")
add_subdirectory("src/kotek.core.containers.unordered_map")
add_subdirectory("src/kotek.core.containers.unordered_set")
add_subdirectory("src/kotek.core.containers.variant")
add_subdirectory("src/kotek.core.containers.vector")
add_subdirectory("src/kotek.core.containers.list")
add_subdirectory("src/kotek.core.filesystem")
add_subdirectory("src/kotek.core.filesystem.file_text")
add_subdirectory("src/kotek.core.format")
add_subdirectory("src/kotek.core.memory")
add_subdirectory("src/kotek.core.memory.cpu")
add_subdirectory("src/kotek.core.memory.gpu")
add_subdirectory("src/kotek.core.memory.gpu.vulkan")

add_subdirectory("src/kotek.core.math")
add_subdirectory("src/kotek.core.profilers")
add_subdirectory("src/kotek.core.profilers.cpu")
add_subdirectory("src/kotek.core.profilers.gpu")
add_subdirectory("src/kotek.core.resource_manager")
add_subdirectory("src/kotek.core.resource_manager.loader")
add_subdirectory("src/kotek.core.resource_manager.saver")
add_subdirectory("src/kotek.core.resource_manager.streaming")
add_subdirectory("src/kotek.core.os")
add_subdirectory("src/kotek.core.os.win32")
add_subdirectory("src/kotek.core.os.linux")
add_subdirectory("src/kotek.core.window")
add_subdirectory("src/kotek.core.window.glfw")
add_subdirectory("src/kotek.core.window_manager")
add_subdirectory("src/kotek.core.log")
add_subdirectory("src/kotek.core.console")
add_subdirectory("src/kotek.core.engine_config")
add_subdirectory("src/kotek.core.main_manager")
add_subdirectory("src/kotek.core.ecs")
add_subdirectory("src/kotek.core.enum")
add_subdirectory("src/kotek.core.enum.core")
add_subdirectory("src/kotek.core.enum.render")
add_subdirectory("src/kotek.core.enum.render.dx")
add_subdirectory("src/kotek.core.enum.render.gl")
add_subdirectory("src/kotek.core.enum.render.vk")
add_subdirectory("src/kotek.core.enum.render.bgfx")
add_subdirectory("src/kotek.core.input")
add_subdirectory("src/kotek.core.utility")

add_subdirectory("src/kotek.game")

add_subdirectory("src/kotek.ui")
add_subdirectory("src/kotek.ui.imgui")

if ("${KOTEK_UI_GAME_LIBRARY}" STREQUAL "CEF")
	add_subdirectory("src/kotek.ui.cef")
elseif("${KOTEK_UI_GAME_LIBRARY}" STREQUAL "RMLUI")
	add_subdirectory("src/kotek.ui.rmlui")
endif()

add_subdirectory("src/kotek.ui.videoplayer")
add_subdirectory("src/kotek.ui.videoplayer.avif")

if (WIN32)
	# DEPRECATED: undo comments when you finish vulkan renderer!
#add_subdirectory("src/kotek.render.dx12")
endif()

add_subdirectory("src/kotek.render")

add_subdirectory("src/kotek.render.shared")
add_subdirectory("src/kotek.render.shared.vk")
add_subdirectory("src/kotek.render.shared.gl")
add_subdirectory("src/kotek.render.shared.dx")
add_subdirectory("src/kotek.render.shared.bgfx")
add_subdirectory("src/kotek.render.model")
add_subdirectory("src/kotek.render.model.assimp")
add_subdirectory("src/kotek.render.model.cgltf")
add_subdirectory("src/kotek.render.vk")
add_subdirectory("src/kotek.render.gl")
add_subdirectory("src/kotek.render.gl.glad")
add_subdirectory("src/kotek.render.software")
add_subdirectory("src/kotek.render.angle.gles")
add_subdirectory("src/kotek.render.angle.gles23")
add_subdirectory("src/kotek.render.bgfx")

add_subdirectory("src/kotek.exe")

# TODO: when CMake will fix that we can restore but for now we can't use this due to breaking USE_FOLDERS feature...
# TODO2: Rename cmake default filter folder CMakePredefinedTargets as just plain 'targets' word
#set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT kotek)